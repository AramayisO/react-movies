{"version":3,"sources":["Modal.js","MovieCard.js","MovieList.js","MovieDetails.js","utils.js","SearchBar.js","Paginator.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","onClose","children","onClick","MovieCard","title","type","posterUrl","onMovieClicked","style","display","border","margin","src","alt","MovieList","movies","onMovieCardClicked","map","movie","Title","Type","Poster","imdbID","defaultProps","MovieDetails","props","rating","rated","runtime","genre","plot","actors","OMDB_API_BASE_URL","OMDB_API_KEY","process","getMoviesByName","search","a","page","url","fetch","res","json","data","console","log","Search","getMovieDetailsById","movieId","SearchBar","state","onFormSubmit","bind","event","preventDefault","this","onSubmit","placeholder","value","onChange","setState","target","React","Component","Paginator","currentPage","getNextPage","getPrevPage","App","isLoading","error","showModal","selectedMovieId","selectedMovie","updateShowModalState","onSearchFormSubmit","setTimeout","prevProps","prevState","newMovie","newMovies","shouldShow","id","ammount","newPage","updatePage","show","Ratings","Value","Rated","Runtime","Genre","Plot","Actors","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af6fa09c.chunk.js","sourcesContent":["const Modal = ({ onClose, children }) => {\n  return (\n    <div>\n      <div>\n        <button onClick={onClose}>X</button>\n      </div>\n      { children }\n    </div>\n  )\n}\n\nexport default Modal;","const MovieCard = ({ title, type, posterUrl, onMovieClicked }) => {\n  return (\n    <div \n      style={{ display: \"inline-block\", border: \"1px solid black\", margin: \"15px\" }}\n      onClick={onMovieClicked}\n    >\n      <section>\n        <img src={posterUrl} alt={`${title} poster`} />\n      </section>\n      <section>\n        <p>{title}</p>\n        <div>\n          <span>{type}</span>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default MovieCard;","import MovieCard from \"./MovieCard\"\n\nconst MovieList = ({ movies, onMovieCardClicked }) => {\n  return (\n    <div>\n      {movies.map(movie =>\n        <MovieCard \n          key={movie.imdbID}\n          title={movie.Title}\n          type={movie.Type}\n          posterUrl={movie.Poster}\n          onMovieClicked={() => onMovieCardClicked(movie.imdbID)}\n        /> )\n      }\n    </div>\n  );\n}\n\nMovieList.defaultProps = {\n  movies: []\n}\n\nexport default MovieList;","import PropsTypes from 'prop-types';\n\nconst MovieDetails = (props) => {\n  return (\n    <div>\n      <section>\n        <img src={props.posterUrl} alt={`Poster for ${props.title}`} />\n      </section>\n      <section>\n        <div>\n          <p>{props.title}</p>\n          <p>{props.rating}</p>\n        </div>\n        <div>\n          <span>{props.rated}</span>\n          <span>{props.runtime}</span>\n          <span>{props.genre}</span>\n        </div>\n        <div>\n          <p>Plot:</p>\n          <p>{props.plot}</p>\n        </div>\n        <div>\n          <p>Actors:</p>\n          <p>{props.actors}</p>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nMovieDetails.propTypes = {\n  posterUrl: PropsTypes.string.isRequired,\n  title: PropsTypes.string.isRequired,\n  rating: PropsTypes.number.isRequired,\n  rated: PropsTypes.string.isRequired,\n  runtime: PropsTypes.number.isRequired,\n  genre: PropsTypes.string.isRequired,\n  plot: PropsTypes.string.isRequired,\n  actors: PropsTypes.string.isRequired,\n};\n\nMovieDetails.defaultProps = {\n  rating: 0,\n  rated: 'N/A',\n  genre: 'N/A',\n  plot: 'N/A',\n  actors: 'N/A',\n}\n\nexport default MovieDetails;","const OMDB_API_BASE_URL = 'http://www.omdbapi.com/';\nconst OMDB_API_KEY = process.env.REACT_APP_OMDB_API_KEY;\n\nexport const getMoviesByName = async (search, type='movie', page=1) => {\n  const url = `${OMDB_API_BASE_URL}?apikey=${OMDB_API_KEY}&s=${search}&type=${type}&page=${page}`;\n\n  try {\n    const res = await fetch(url);\n    const data = await res.json();\n    console.log(data)\n    return data.Search;\n  } catch (error) {\n    console.log(error)\n  }\n\n  return [];\n}\n\nexport const getMovieDetailsById = async (movieId) => {\n  const url = `${OMDB_API_BASE_URL}?apikey=${OMDB_API_KEY}&i=${movieId}`;\n\n  try {\n    const res = await fetch(url);\n    const movie = await res.json();\n    return movie;\n  } catch (error) {\n    console.log(error)\n  }\n\n  return null;\n}","import React from 'react';\n\nclass SearchBar extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      search: '',\n      type: 'movie'\n    }\n\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onFormSubmit(event) {\n    event.preventDefault();\n    this.props.onSubmit(this.state.search, this.state.type)\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <input \n          type=\"text\" \n          placeholder=\"Search for a movie...\"\n          value={this.state.search}\n          onChange={(event) => this.setState({ search: event.target.value })}\n        />\n        <select value={this.state.type} onChange={(event) => this.setState({ type: event.target.value })}>\n          <option value=\"movie\">Movie</option>\n          <option value=\"series\">Series</option>\n          <option value=\"episode\">Episode</option>\n        </select>\n        <button type=\"submit\">Search</button>\n      </form>\n    )\n  }\n}\n\nexport default SearchBar;","const Paginator = ({ currentPage, getNextPage, getPrevPage }) => {\n  return (\n    <div>\n      <p>PAGE: {currentPage}</p>\n      <button onClick={() => getPrevPage()}>Prev</button>\n      <button onClick={() => getNextPage()}>Next</button>\n    </div>\n  )\n}\n\nexport default Paginator;","import React from 'react';\nimport Modal from './Modal';\nimport MovieList from './MovieList';\nimport MovieDetails from './MovieDetails';\nimport {getMovieDetailsById, getMoviesByName} from './utils'\nimport SearchBar from './SearchBar';\nimport Paginator from './Paginator';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movies: [],\n      search: 'batman',\n      type: '',\n      isLoading: false,\n      error: null,\n      showModal: false,\n      selectedMovieId: null,\n      selectedMovie: null,\n      page: 1,\n    };\n\n    this.updateShowModalState = this.updateShowModalState.bind(this);\n    this.onMovieClicked = this.onMovieClicked.bind(this);\n    this.onSearchFormSubmit = this.onSearchFormSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    this.setState({\n      isLoading: true,\n    });\n\n    setTimeout(async () => {\n      try {\n        const movies = await getMoviesByName(this.state.search);\n        this.setState({\n          movies,\n          error: null,\n          isLoading: false,\n        });\n      } catch(error) {\n        this.setState({\n          movies: [],\n          error,\n          isLoading: false,\n        });\n      }\n    },\n      5000\n    )\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevState.selectedMovieId !== this.state.selectedMovieId) {\n      try {\n        const newMovie = await getMovieDetailsById(this.state.selectedMovieId);\n        this.setState({\n          selectedMovie: newMovie,\n          showModal: true\n        });\n      } catch(error) {\n        this.setState({\n          error: error,\n          showModal: false,\n        });\n      }\n    }\n\n    if (prevState.search !== this.state.search || prevState.type !== this.state.type || prevState.page !== this.state.page) {\n      try {\n        const newMovies = await getMoviesByName(this.state.search, this.state.type, this.state.page);\n        this.setState({\n          movies: newMovies,\n          error: null,\n        });\n      } catch(error) {\n        this.setState({\n          error: error,\n          movies: [],\n        });\n      }\n    }\n  }\n\n  updateShowModalState(shouldShow) {\n    this.setState({\n      showModal: shouldShow\n    });\n  }\n\n  onMovieClicked(id) {\n    this.setState({\n      selectedMovieId: id,\n    });\n  }\n\n  onSearchFormSubmit(search, type) {\n    this.setState({\n      search,\n      type\n    });\n\n    console.log(search, type)\n  }\n\n  updatePage(ammount) {\n    this.setState((prevState) => {\n      const newPage = prevState.page + ammount;\n\n      if (newPage > 0 && newPage < 101) {\n        return { page: newPage };\n      }\n\n      return { page: prevState.page };\n    });\n  }\n\n  render() {\n    const { selectedMovie } = this.state;\n\n    return (\n      <div>\n        <SearchBar onSubmit={this.onSearchFormSubmit} />\n        {this.state.isLoading && <p>Loading...</p>}\n        <MovieList movies={this.state.movies} onMovieCardClicked={this.onMovieClicked} />\n        <Paginator currentPage={this.state.page} getNextPage={() => this.updatePage(1)} getPrevPage={() => this.updatePage(-1)} />\n        {this.state.showModal &&\n          <Modal show={this.state.showModal} onClose={() => this.updateShowModalState(false)}>\n            <MovieDetails \n               posterUrl={selectedMovie.Poster}\n               title={selectedMovie.Title}\n               rating={selectedMovie.Ratings[0].Value}\n               rated={selectedMovie.Rated}\n               runtime={selectedMovie.Runtime}\n               genre={selectedMovie.Genre}\n               plot={selectedMovie.Plot}\n               actors={selectedMovie.Actors}\n            />\n          </Modal>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}